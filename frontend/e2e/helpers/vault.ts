import { existsSync, mkdirSync, writeFileSync, rmSync, readFileSync } from 'node:fs';
import { join, dirname } from 'node:path';

/**
 * Vault management utilities for e2e tests
 * 
 * Provides low-level file operations for test vault management
 * and content manipulation during tests.
 */

export interface VaultFile {
  path: string;
  content: string;
}

export class VaultHelper {
  private vaultPath: string;

  constructor(vaultPath: string) {
    this.vaultPath = vaultPath;
  }

  /**
   * Create the vault directory if it doesn't exist
   */
  ensureVaultExists(): void {
    if (!existsSync(this.vaultPath)) {
      mkdirSync(this.vaultPath, { recursive: true });
    }
  }

  /**
   * Add a note to the vault
   */
  addNote(relativePath: string, content: string): void {
    const fullPath = join(this.vaultPath, relativePath);
    const dir = dirname(fullPath);
    
    // Ensure directory exists
    if (!existsSync(dir)) {
      mkdirSync(dir, { recursive: true });
    }
    
    // Write the note
    writeFileSync(fullPath, content, 'utf8');
  }

  /**
   * Remove a note from the vault
   */
  removeNote(relativePath: string): void {
    const fullPath = join(this.vaultPath, relativePath);
    if (existsSync(fullPath)) {
      rmSync(fullPath);
    }
  }

  /**
   * Update an existing note
   */
  updateNote(relativePath: string, content: string): void {
    this.addNote(relativePath, content);
  }

  /**
   * Read a note from the vault
   */
  readNote(relativePath: string): string | null {
    const fullPath = join(this.vaultPath, relativePath);
    if (existsSync(fullPath)) {
      return readFileSync(fullPath, 'utf8');
    }
    return null;
  }

  /**
   * Check if a note exists
   */
  noteExists(relativePath: string): boolean {
    const fullPath = join(this.vaultPath, relativePath);
    return existsSync(fullPath);
  }

  /**
   * Create a directory in the vault
   */
  createDirectory(relativePath: string): void {
    const fullPath = join(this.vaultPath, relativePath);
    if (!existsSync(fullPath)) {
      mkdirSync(fullPath, { recursive: true });
    }
  }

  /**
   * Remove a directory from the vault
   */
  removeDirectory(relativePath: string): void {
    const fullPath = join(this.vaultPath, relativePath);
    if (existsSync(fullPath)) {
      rmSync(fullPath, { recursive: true, force: true });
    }
  }

  /**
   * Get the vault path
   */
  getVaultPath(): string {
    return this.vaultPath;
  }

  /**
   * Clean the entire vault
   */
  cleanVault(): void {
    if (existsSync(this.vaultPath)) {
      rmSync(this.vaultPath, { recursive: true, force: true });
    }
  }

  /**
   * List all files in the vault (recursive)
   */
  async listFiles(): Promise<string[]> {
    const files: string[] = [];
    
    const scanDirectory = async (dir: string, basePath: string = '') => {
      const { readdirSync, statSync } = await import('node:fs');
      const items = readdirSync(dir);
      
      for (const item of items) {
        const fullPath = join(dir, item);
        const relativePath = join(basePath, item);
        
        if (statSync(fullPath).isDirectory()) {
          await scanDirectory(fullPath, relativePath);
        } else {
          files.push(relativePath);
        }
      }
    };

    if (existsSync(this.vaultPath)) {
      await scanDirectory(this.vaultPath);
    }
    
    return files;
  }

  /**
   * Create a test note with standard content
   */
  createTestNote(relativePath: string, title: string = 'Test Note'): void {
    const content = `# ${title}

This is a test note created at ${new Date().toISOString()}.

## Test Content

This note is used for e2e testing purposes.

### Features

- Markdown formatting
- Test data
- E2E validation

---

*Generated by VaultHelper*`;

    this.addNote(relativePath, content);
  }

  /**
   * Create multiple test notes for bulk testing
   */
  createBulkTestNotes(count: number, basePath: string = ''): string[] {
    const createdFiles: string[] = [];
    
    for (let i = 1; i <= count; i++) {
      const fileName = `test-note-${i}.md`;
      const relativePath = basePath ? join(basePath, fileName) : fileName;
      
      this.createTestNote(relativePath, `Test Note ${i}`);
      createdFiles.push(relativePath);
    }
    
    return createdFiles;
  }
}

/**
 * Create a vault helper instance
 */
export function createVaultHelper(vaultPath: string): VaultHelper {
  return new VaultHelper(vaultPath);
}

/**
 * Utility function to create a temporary vault path
 */
export function createTempVaultPath(): string {
  const os = require('node:os');
  const path = require('node:path');
  return path.join(os.tmpdir(), `kbase-test-vault-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);
}

// Global vault helper for e2e tests
let globalVaultHelper: VaultHelper | null = null;

/**
 * Create a vault with test files
 * Used in e2e tests to set up test data
 */
export async function createVault(files: VaultFile[]): Promise<void> {
  const vaultPath = process.env.KBASE_VAULT_PATH || '/tmp/kbase-test-vault';
  
  if (!globalVaultHelper) {
    globalVaultHelper = new VaultHelper(vaultPath);
  }
  
  // Ensure vault exists
  globalVaultHelper.ensureVaultExists();
  
  // Create all files
  for (const file of files) {
    globalVaultHelper.addNote(file.path, file.content);
  }
}

/**
 * Destroy the vault (clean up)
 * Used in e2e tests to clean up after tests
 */
export async function destroyVault(): Promise<void> {
  if (globalVaultHelper) {
    globalVaultHelper.cleanVault();
    globalVaultHelper = null;
  }
}
